#!/usr/bin/python

import paho.mqtt.client as mqtt
import ssl
import json,time
import sys
import json
import Adafruit_DHT

#called while client tries to establish connection with the server
def on_connect(mqttc, obj, flags, rc):
    if rc==0:
        print ("Subscriber Connection status code: "+str(rc)+" | Connection status: successful")
    elif rc==1:
        print ("Subscriber Connection status code: "+str(rc)+" | Connection status: Connection refused")

#called when a topic is successfully subscribed to


def on_subscribe(mqttc, obj, mid, granted_qos):
    print("Subscribed: "+str(mid)+" "+str(granted_qos)+"data"+str(obj))

#called when a message is received by a topic
def on_message(mqttc, obj, msg):
    print("Received message from topic: "+msg.topic+" | QoS: "+str(msg.qos)+" | Data Received: "+str(msg.payload))

#creating a client with client-id=mqtt-test
mqttc = mqtt.Client(client_id="raspberry-pi")

mqttc.on_connect = on_connect
mqttc.on_subscribe = on_subscribe
mqttc.on_message = on_message

#Configure network encryption and authentication options. Enables SSL/TLS support.
#adding client-side certificates and enabling tlsv1.2 support as required by aws-iot service
mqttc.tls_set("/home/pi/Desktop/amazon_certs/aws-iot-rootCA.crt",
                certfile="/home/pi/Desktop/amazon_certs/e57dafe5a2-certificate.pem.crt",
                keyfile="/home/pi/Desktop/amazon_certs/e57dafe5a2-private.pem.key",
              tls_version=ssl.PROTOCOL_TLSv1_2,
              ciphers=None)


#connecting to aws-account-specific-iot-endpoint
mqttc.connect("a2yye602yte99c.iot.us-west-2.amazonaws.com", port=8883) #AWS IoT service hostname and portno

while True:

	
	humidity, temperature = Adafruit_DHT.read_retry(11, 4)

	
	payload = json.dumps({
		"state" : {
			"reported" : {
				"humidity" : humidity,
				"temperature" : temperature
				}
			}
	})
	mqttc.publish("topic/sensordata",payload)
	#The topic to publish to 
	mqttc.subscribe("$aws/things/raspberry-pi/shadow/update",qos=1)

	print 'Temp: {0:0.1f} C  Humidity: {1:0.1f} %'.format(temperature, humidity)
	

#automatically handles reconnecting
#mqttc.loop_forever()
